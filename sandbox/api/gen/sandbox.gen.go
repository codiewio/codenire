// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
)

// Defines values for ActionItemResponseEnableExternalCommands.
const (
	ActionItemResponseEnableExternalCommandsAll     ActionItemResponseEnableExternalCommands = "all"
	ActionItemResponseEnableExternalCommandsCompile ActionItemResponseEnableExternalCommands = "compile"
	ActionItemResponseEnableExternalCommandsNone    ActionItemResponseEnableExternalCommands = "none"
	ActionItemResponseEnableExternalCommandsRun     ActionItemResponseEnableExternalCommands = "run"
)

// Defines values for ImageActionConfigEnableExternalCommands.
const (
	ImageActionConfigEnableExternalCommandsAll     ImageActionConfigEnableExternalCommands = "all"
	ImageActionConfigEnableExternalCommandsCompile ImageActionConfigEnableExternalCommands = "compile"
	ImageActionConfigEnableExternalCommandsNone    ImageActionConfigEnableExternalCommands = "none"
	ImageActionConfigEnableExternalCommandsRun     ImageActionConfigEnableExternalCommands = "run"
)

// ActionItemResponse defines model for ActionItemResponse.
type ActionItemResponse struct {
	CompileCmd       string            `json:"CompileCmd"`
	ContainerOptions ContainerOptions  `json:"ContainerOptions"`
	DefaultFiles     map[string]string `json:"DefaultFiles"`

	// EnableExternalCommands It allows overriding CompileCmd and RunCmd in each request.
	EnableExternalCommands ActionItemResponseEnableExternalCommands `json:"EnableExternalCommands"`
	Groups                 []string                                 `json:"Groups"`
	Id                     string                                   `json:"Id"`
	IsDefault              bool                                     `json:"IsDefault"`
	IsSupportPackage       bool                                     `json:"IsSupportPackage"`
	Name                   string                                   `json:"Name"`
	Provider               string                                   `json:"Provider"`
	RunCmd                 string                                   `json:"RunCmd"`
	ScriptOptions          ImageConfigScriptOptions                 `json:"ScriptOptions"`
	Template               string                                   `json:"Template"`
	Version                string                                   `json:"Version"`
	Workdir                string                                   `json:"Workdir"`
}

// ActionItemResponseEnableExternalCommands It allows overriding CompileCmd and RunCmd in each request.
type ActionItemResponseEnableExternalCommands string

// ActionListResponse defines model for ActionListResponse.
type ActionListResponse = []ActionItemResponse

// CommonSubmissionRequest defines model for CommonSubmissionRequest.
type CommonSubmissionRequest struct {
	ActionId *string `json:"ActionId,omitempty"`
	Args     string  `json:"Args"`

	// ExternalOptions external options like CompileCmd or RunCmd
	ExternalOptions *map[string]string `json:"ExternalOptions,omitempty"`

	// Stdin data which will available via stdin reader
	Stdin      string `json:"Stdin"`
	TemplateId string `json:"TemplateId"`
}

// ContainerOptions defines model for ContainerOptions.
type ContainerOptions struct {
	CompileTTL  *int `json:"CompileTTL,omitempty"`
	MemoryLimit *int `json:"MemoryLimit,omitempty"`
	RunTTL      *int `json:"RunTTL,omitempty"`
}

// ImageActionConfig defines model for ImageActionConfig.
type ImageActionConfig struct {
	CompileCmd   string            `json:"CompileCmd"`
	DefaultFiles map[string]string `json:"DefaultFiles"`

	// EnableExternalCommands It allows overriding CompileCmd and RunCmd in each request.
	EnableExternalCommands ImageActionConfigEnableExternalCommands `json:"EnableExternalCommands"`
	Id                     string                                  `json:"Id"`
	IsDefault              bool                                    `json:"IsDefault"`
	Name                   string                                  `json:"Name"`
	RunCmd                 string                                  `json:"RunCmd"`
	ScriptOptions          ImageConfigScriptOptions                `json:"ScriptOptions"`
}

// ImageActionConfigEnableExternalCommands It allows overriding CompileCmd and RunCmd in each request.
type ImageActionConfigEnableExternalCommands string

// ImageConfig defines model for ImageConfig.
type ImageConfig struct {
	Actions          map[string]ImageActionConfig `json:"Actions"`
	ContainerOptions ContainerOptions             `json:"ContainerOptions"`
	Groups           []string                     `json:"Groups"`
	IsSupportPackage bool                         `json:"IsSupportPackage"`
	Provider         string                       `json:"Provider"`
	Template         string                       `json:"Template"`
	Version          string                       `json:"Version"`
	Workdir          string                       `json:"Workdir"`
}

// ImageConfigScriptOptions defines model for ImageConfigScriptOptions.
type ImageConfigScriptOptions struct {
	SourceFile string `json:"SourceFile"`
}

// ImageTemplateConfig defines model for ImageTemplateConfig.
type ImageTemplateConfig struct {
	ContainerOptions ContainerOptions `json:"ContainerOptions"`
	Groups           []string         `json:"Groups"`
	IsSupportPackage bool             `json:"IsSupportPackage"`
	Provider         string           `json:"Provider"`
	Template         string           `json:"Template"`
	Version          string           `json:"Version"`
	Workdir          string           `json:"Workdir"`
}

// SandboxRequest defines model for SandboxRequest.
type SandboxRequest struct {
	Action string `json:"action"`
	Args   string `json:"args"`

	// Binary files in tar archive encoded with base64
	Binary          string             `json:"binary"`
	ExtendedOptions *map[string]string `json:"extendedOptions,omitempty"`
	SandId          string             `json:"sandId"`

	// Stdin data which will available via stdin reader
	Stdin string `json:"stdin"`
}

// SandboxResponse defines model for SandboxResponse.
type SandboxResponse struct {
	Error    *string `json:"error,omitempty"`
	ExitCode int     `json:"exitCode"`
	Stderr   []byte  `json:"stderr"`
	Stdout   []byte  `json:"stdout"`
}

// SubmissionRequest defines model for SubmissionRequest.
type SubmissionRequest struct {
	ActionId *string `json:"ActionId,omitempty"`
	Args     string  `json:"Args"`

	// ExternalOptions external options like CompileCmd or RunCmd
	ExternalOptions *map[string]string `json:"ExternalOptions,omitempty"`
	Files           map[string]string  `json:"Files"`

	// Stdin data which will available via stdin reader
	Stdin      string `json:"Stdin"`
	TemplateId string `json:"TemplateId"`
}

// SubmissionResponse defines model for SubmissionResponse.
type SubmissionResponse struct {
	Errors *[]string                  `json:"Errors,omitempty"`
	Events []SubmissionResponseEvents `json:"Events"`
	Meta   *SubmissionResponse_Meta   `json:"Meta,omitempty"`
	Time   *string                    `json:"Time,omitempty"`
}

// SubmissionResponse_Meta defines model for SubmissionResponse.Meta.
type SubmissionResponse_Meta struct {
	Version              *string                `json:"Version,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SubmissionResponseEvents defines model for SubmissionResponseEvents.
type SubmissionResponseEvents struct {
	Kind    string `json:"Kind"`
	Message string `json:"Message"`
}

// SubmissionScriptRequest defines model for SubmissionScriptRequest.
type SubmissionScriptRequest struct {
	ActionId *string `json:"ActionId,omitempty"`
	Args     string  `json:"Args"`
	Code     string  `json:"Code"`

	// ExternalOptions external options like CompileCmd or RunCmd
	ExternalOptions *map[string]string `json:"ExternalOptions,omitempty"`

	// Stdin data which will available via stdin reader
	Stdin      string `json:"Stdin"`
	TemplateId string `json:"TemplateId"`
}

// TemplateItemResponse defines model for TemplateItemResponse.
type TemplateItemResponse struct {
	Actions    *[]string `json:"Actions,omitempty"`
	TemplateId *string   `json:"TemplateId,omitempty"`
}

// RunFilesSubmissionJSONRequestBody defines body for RunFilesSubmission for application/json ContentType.
type RunFilesSubmissionJSONRequestBody = SubmissionRequest

// RunScriptSubmissionJSONRequestBody defines body for RunScriptSubmission for application/json ContentType.
type RunScriptSubmissionJSONRequestBody = SubmissionScriptRequest

// Getter for additional properties for SubmissionResponse_Meta. Returns the specified
// element and whether it was found
func (a SubmissionResponse_Meta) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubmissionResponse_Meta
func (a *SubmissionResponse_Meta) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubmissionResponse_Meta to handle AdditionalProperties
func (a *SubmissionResponse_Meta) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["Version"]; found {
		err = json.Unmarshal(raw, &a.Version)
		if err != nil {
			return fmt.Errorf("error reading 'Version': %w", err)
		}
		delete(object, "Version")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubmissionResponse_Meta to handle AdditionalProperties
func (a SubmissionResponse_Meta) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Version != nil {
		object["Version"], err = json.Marshal(a.Version)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'Version': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
