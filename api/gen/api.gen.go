// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
)

// SubmissionRequest defines model for SubmissionRequest.
type SubmissionRequest struct {
	Args            string             `json:"Args"`
	ExtendedOptions *map[string]string `json:"ExtendedOptions,omitempty"`
	Files           map[string]string  `json:"Files"`

	// Stdin data which will available via stdin reader
	Stdin      string `json:"Stdin"`
	TemplateId string `json:"TemplateId"`
}

// SubmissionResponse defines model for SubmissionResponse.
type SubmissionResponse struct {
	Errors *[]string                  `json:"Errors,omitempty"`
	Events []SubmissionResponseEvents `json:"Events"`
	Meta   *SubmissionResponse_Meta   `json:"Meta,omitempty"`
	Time   *string                    `json:"Time,omitempty"`
}

// SubmissionResponse_Meta defines model for SubmissionResponse.Meta.
type SubmissionResponse_Meta struct {
	Version              *string                `json:"Version,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SubmissionResponseEvents defines model for SubmissionResponseEvents.
type SubmissionResponseEvents struct {
	Kind    string `json:"Kind"`
	Message string `json:"Message"`
}

// SubmissionScriptRequest defines model for SubmissionScriptRequest.
type SubmissionScriptRequest struct {
	Args            string             `json:"Args"`
	Code            string             `json:"Code"`
	ExtendedOptions *map[string]string `json:"ExtendedOptions,omitempty"`

	// Stdin data which will available via stdin reader
	Stdin      string `json:"Stdin"`
	TemplateId string `json:"TemplateId"`
}

// RunFilesSubmissionJSONRequestBody defines body for RunFilesSubmission for application/json ContentType.
type RunFilesSubmissionJSONRequestBody = SubmissionRequest

// RunScriptSubmissionJSONRequestBody defines body for RunScriptSubmission for application/json ContentType.
type RunScriptSubmissionJSONRequestBody = SubmissionScriptRequest

// Getter for additional properties for SubmissionResponse_Meta. Returns the specified
// element and whether it was found
func (a SubmissionResponse_Meta) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubmissionResponse_Meta
func (a *SubmissionResponse_Meta) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubmissionResponse_Meta to handle AdditionalProperties
func (a *SubmissionResponse_Meta) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["Version"]; found {
		err = json.Unmarshal(raw, &a.Version)
		if err != nil {
			return fmt.Errorf("error reading 'Version': %w", err)
		}
		delete(object, "Version")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubmissionResponse_Meta to handle AdditionalProperties
func (a SubmissionResponse_Meta) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Version != nil {
		object["Version"], err = json.Marshal(a.Version)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'Version': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
